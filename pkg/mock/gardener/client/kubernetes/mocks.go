// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener/pkg/client/kubernetes (interfaces: RuntimeClientFactory)

// Package kubernetes is a generated GoMock package.
package kubernetes

import (
	kubernetes "github.com/gardener/gardener/pkg/client/kubernetes"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockRuntimeClientFactory is a mock of RuntimeClientFactory interface
type MockRuntimeClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeClientFactoryMockRecorder
}

// MockRuntimeClientFactoryMockRecorder is the mock recorder for MockRuntimeClientFactory
type MockRuntimeClientFactoryMockRecorder struct {
	mock *MockRuntimeClientFactory
}

// NewMockRuntimeClientFactory creates a new mock instance
func NewMockRuntimeClientFactory(ctrl *gomock.Controller) *MockRuntimeClientFactory {
	mock := &MockRuntimeClientFactory{ctrl: ctrl}
	mock.recorder = &MockRuntimeClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRuntimeClientFactory) EXPECT() *MockRuntimeClientFactoryMockRecorder {
	return m.recorder
}

// CreateRuntimeClientFromSecret mocks base method
func (m *MockRuntimeClientFactory) CreateRuntimeClientFromSecret(arg0 *v1.Secret, arg1 ...kubernetes.ConfigFunc) (client.Client, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRuntimeClientFromSecret", varargs...)
	ret0, _ := ret[0].(client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuntimeClientFromSecret indicates an expected call of CreateRuntimeClientFromSecret
func (mr *MockRuntimeClientFactoryMockRecorder) CreateRuntimeClientFromSecret(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuntimeClientFromSecret", reflect.TypeOf((*MockRuntimeClientFactory)(nil).CreateRuntimeClientFromSecret), varargs...)
}
